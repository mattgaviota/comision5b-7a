# -*- coding: utf-8 -*-
"""tp7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vSXAHurGJGGQFJ1PrdajooPyeUGItWGG

## Ejercicio 1 

Crear una clase de números enteros y redefinir las funciones elementales (+ , - , *, /) usando los métodos denominados mágicos.

Sobrecargar el operador "/": si el divisor es 0 devuelve como resultado 0 y un msj de error
"""

class Entero:

    def __init__(self, numero: int) -> None:
        self.entero = numero
    
    def __add__(self, otro_entero) -> int:
        return self.entero + otro_entero.entero
    
    def __sub__(self, otro_entero) -> int:
        return self.entero - otro_entero.entero
    
    def __mul__(self, otro_entero) -> int:
        return self.entero * otro_entero.entero
    
    def __truediv__(self, otro_entero) -> int:
        try:
            return self.entero // otro_entero.entero
        except ZeroDivisionError:
            print("No se puede dividir por cero")
            return 0

diez = Entero(10)
cinco = Entero(5)
cero = Entero(0)
print(diez * cinco)
print(cinco - cero)
print(cinco / cero)
print(diez / cinco)

import matplotlib.pyplot as plt
import matplotlib.patches as pc

size=(10.0, 10.0)
axis=(0, 10)
xlabel="X"
ylabel="Y"
punto_inicio = (1, 2)
base = 3
altura = 3

fig1 = plt.figure(figsize=size)  # Ventana 1
ax1 = fig1.add_subplot(xlim=axis, ylim=axis)
ax1.add_patch(
    pc.Rectangle(  # Rectángulo
        punto_inicio,  # （x,y）
        base,  # base
        altura,  # altura
        color='#0000dd'  # Gris
    )
)
plt.ylabel(xlabel)
plt.xlabel(ylabel)
plt.show()

"""## Ejercicio 3

Crear una clase llamada Rectangulo con dos puntos (inicial y final) que formarán la diagonal del rectángulo (los puntos se formarán con una lista de 2 elementos). Usar la clase punto como superclase.

* Añadir un método constructor para crear ambos puntos fácilmente, si no se envían se crearán dos puntos en el origen por defecto.
* Añadir al rectángulo un método llamado base que muestre la base.
* Añadir al rectángulo un método llamado altura que muestre la altura.
* Añadir al rectángulo un método llamado área que muestre el área.
* Dibujar el rectángulo, usar "matplotlib".

"""

class Punto:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __str__(self):
        return f"({self.x}, {self.y})"
    
    def __call__(self):
        return (self.x, self.y)

class Rectangulo:
    def __init__(self, inicial=(0, 0), final=(0, 0)):
        self.inicial = Punto(*inicial)
        self.final = Punto(*final)
    
    def base(self):
        resultado = abs(self.final.x - self.inicial.x)
        return resultado
    
    def altura(self):
        resultado = abs(self.final.y - self.inicial.y)
        return resultado
    
    def area(self):
        resultado = self.base() * self.altura()
        return resultado
    
    def dibujar(self, size=(6.0, 6.0), axis=(0, 5), xlabel="X", ylabel="Y"):
        import matplotlib.pyplot as plt
        import matplotlib.patches as pc
        fig1 = plt.figure(figsize=size)  # Ventana 1
        ax1 = fig1.add_subplot(xlim=axis, ylim=axis)
        ax1.add_patch(
            pc.Rectangle(  # Rectángulo
                self.inicial(),  # （x,y）
                self.base(),  # base
                self.altura(),  # altura
                color='#B2B2B2'  # Gris
            )
        )
        plt.ylabel(ylabel)
        plt.xlabel(xlabel)
        plt.show()
    
rectangulo = Rectangulo((0, 3), (3, 5))
print(rectangulo.inicial, rectangulo.final)
print(f"Base {rectangulo.base()}")
print(f"Altura {rectangulo.altura()}")
print(f"Area {rectangulo.area()}")
rectangulo.dibujar(axis=(0, 5))

"""# Ejercicio 4

Escribir una clase con el nombre Monedas. Esta debe contener valores en varias monedas, por ejemplo, "EUR", "USD", "ARG", "YEN". Una instancia debe contener la cantidad y la unidad monetaria. La clase, que va a diseñar debe tener los siguientes métodos:
* Crear constructor
* Sumar distintas monedas
* Sumar una moneda con otro valor distinto
* Redefinir función _str_()

"""

class Moneda:
    unidades = {
        'ARS': 1,
        'USD': 0.009,
        'EUR': 0.008,
        'YEN': 1.1,
    }
    def __init__(self, cantidad, unidad='ARS'):
        self.cantidad = cantidad
        if unidad in self.unidades.keys():
            self.unidad = unidad
        else:
            self.unidad = 'ARS'
    
    def __str__(self):
        return f"{self.unidad} {self.cantidad:.2f}"
    
    def convertir_hacia_ars(self):
        return  self.cantidad / self.unidades[self.unidad]
        
    def convertir_desde_ars(self, valor):
        return self.unidades[self.unidad] * valor

    def convertir(self, unidad):
        if unidad in self.unidades.keys():
            valor_ars = self.convertir_hacia_ars()
            self.cantidad = self.unidades[unidad] * valor_ars
            self.unidad = unidad

    def __add__(self, moneda):
        if type(moneda) == int or type(moneda) == float:
            self.cantidad += moneda
            return self
        try:
            valor_ars_propio = self.convertir_hacia_ars()
            valor_ars_moneda = moneda.convertir_hacia_ars()
            valor_resultado = self.convertir_desde_ars(valor_ars_moneda + valor_ars_propio)
            return Moneda(valor_resultado, self.unidad)
        except AttributeError:
            print("No se puede sumar la moneda con ese valor")
            return self

moneda1 = Moneda(5000, 'USD')
moneda2 = Moneda(100, 'EUR')
print(moneda1)
moneda1.convertir('EUR')
print(moneda1)

"""## Ejercicio 5
Crear una clase con los datos de una cuenta de correo electrónico. Cada dato de la cuenta de correo (id, dominio, y password) debe digitarse por separado.

Al mostrar la cuenta los datos de ID y dominio deben aparecer unidos. Por ejemplo: juan@gmail.com. Debe validarse el password, solicitando que sea digitado dos veces.
* Crear constructor usando input() y getpass()
* El password no se puede editar directamente, se debe crear una función específica para tal operación
* Mostrar dirección de mail

"""

import getpass as gp

class Email:

    def __init__(self):
        self.id = self.ingresar_campos("Id")
        self.dominio = self.ingresar_campos("Dominio")
        self.__password = self.ingresar_password()
    
    def ingresar_campos(self, campo):
        valor_ingresado = input(f"Ingrese el {campo}: ")
        return valor_ingresado
    
    def ingresar_password(self):
        password = gp.getpass("Ingrese el password")
        password_repetido = gp.getpass("Ingrese nuevamente el password")
        while password != password_repetido:
            print("Los passwords no coinciden!!")
            password_repetido = gp.getpass("Ingrese nuevamente el password")
        return password
    
    def editar_password(self):
        password_actual = gp.getpass("Ingrese su password actual: ")
        if password_actual != self.__password:
            print("Este no es su password actual")
            return None
        self.__password = self.ingresar_password()
    
    def __str__(self):
        return f"{self.id}@{self.dominio} {self.__password}"
    
email = Email()
print(email)

"""id

password

dominio ej gmail.com, outlook.com, msn.com, hotmail.com, yahoo.com.ar, unsa.edu.ar, exactas.unsa.edu.ar
"""